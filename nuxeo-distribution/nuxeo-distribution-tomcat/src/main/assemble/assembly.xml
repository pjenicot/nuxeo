<project name="tomcat-assembly" default="build" xmlns:nx="urn:nuxeo-build" xmlns:artifact="urn:nuxeo-artifact">
  <taskdef resource="org/nuxeo/build/antlib.xml" uri="urn:nuxeo-build" />
  <taskdef resource="org/nuxeo/build/artifact/antlib.xml" uri="urn:nuxeo-artifact" />

  <target name="init" unless="init.done">
    <tstamp />
    <condition property="build.all">
      <or>
        <isset property="maven.profile.all" />
        <!-- NXP-15473: Deprecated profile all-distributions -->
        <isset property="maven.profile.all-distributions" />
        <not>
          <or>
            <isset property="maven.profile.nuxeo-cap" />
            <isset property="maven.profile.nuxeo-coreserver" />
          </or>
        </not>
      </or>
    </condition>
    <condition property="build.core">
      <or>
        <isset property="maven.profile.nuxeo-coreserver" />
        <isset property="build.all" />
      </or>
    </condition>
    <condition property="build.cap">
      <or>
        <isset property="maven.profile.nuxeo-cap" />
        <isset property="build.all" />
      </or>
    </condition>
    <condition property="build.sdk">
      <or>
        <isset property="maven.profile.release" />
        <isset property="maven.profile.sdk" />
        <isset property="maven.profile.nightly" />
      </or>
    </condition>

    <property name="outdir" value="${maven.project.build.directory}" />
    <antcall target="expand" />
    <property name="init.done" value="true" />
  </target>

  <target name="expand" unless="no.build">
    <artifact:nuxeo-expand />
    <artifact:print output="${outdir}/artifacts-tomcat.properties" mode="sdk" />
    <artifact:print output="${outdir}/dependency-tree.log" />
  </target>

  <target name="build" depends="init" unless="no.build">
    <echo level="info">Building Tomcat standard distributions...</echo>
    <property name="tomcat" value="${outdir}/tomcat.tmp" />
    <antcall target="prepare-tomcat" />
    <artifact:attach file="pom.xml" type="pom" />
    <antcall target="build-nuxeo-coreserver">
      <param name="classifier" value="coreserver" />
    </antcall>
    <antcall target="build-nuxeo-cap">
      <param name="classifier" value="nuxeo-cap" />
    </antcall>
    <delete dir="${tomcat}" failonerror="false" />
  </target>

  <target name="prepare-tomcat">
    <unzip dest="${outdir}">
      <artifact:resolveFile key="org.apache.tomcat:tomcat:${tomcat.version}:zip:${tomcat.classifier}" />
    </unzip>
    <move todir="${tomcat}">
      <fileset dir="${outdir}/apache-tomcat-${tomcat.version}" />
    </move>
    <copy tofile="${tomcat}/bin/tomcat-juli.jar">
      <artifact:resolveFile key="org.apache.tomcat.extras:tomcat-extras-juli" />
    </copy>
    <copy tofile="${tomcat}/lib/tomcat-juli-adapters.jar">
      <artifact:resolveFile key="org.apache.tomcat.extras:tomcat-extras-juli-adapters" />
    </copy>

    <unzip dest="${tomcat}">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-resources::zip:doc" />
    </unzip>
    <copy todir="${tomcat}">
      <fileset dir="src/main/resources/common" />
    </copy>
    <unzip dest="${tomcat}">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-resources::zip:root" />
    </unzip>
    <unzip dest="${tomcat}/bin">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-resources::zip:bin" />
    </unzip>

    <unzip dest="${tomcat}/templates" overwrite="true">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-resources::zip:templates-common" />
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-resources::zip:templates-tomcat" />
    </unzip>

    <echo message="tomcat.version=${tomcat.version}" append="true" file="${tomcat}/templates/nuxeo.defaults" />

    <copy tofile="${tomcat}/templates/nuxeo-wizard.war">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-startup-wizard::war" />
    </copy>

    <copy todir="${tomcat}/client">
      <artifact:resolveFile key="org.nuxeo.shell:nuxeo-shell" />
    </copy>
  </target>

  <target name="build-nuxeo-coreserver" if="build.core" description="Build Tomcat distribution with Nuxeo CoreServer">
    <echo level="info">Building Nuxeo CoreServer...</echo>
    <property name="distribution.dir" value="${outdir}/${classifier}-${maven.project.version}-tomcat" />
    <delete failonerror="false" dir="${distribution.dir}" />
    <copy todir="${distribution.dir}">
      <fileset dir="${tomcat}" />
    </copy>
    <antcall target="chmodx" />

    <!-- Nuxeo core server -->
    <unzip dest="${distribution.dir}/nxserver">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-coreserver::zip" />
    </unzip>

    <!-- Complementary templates for CoreServer -->
    <unzip dest="${distribution.dir}/templates" overwrite="true">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-resources::zip:templates-tomcat-coreserver" />
    </unzip>

    <delete failonerror="false">
      <fileset dir="${distribution.dir}/templates/common/config">
        <include name="commentService-config-bundle.xml" />
        <include name="notification-config.xml" />
        <include name="nxmail-*.xml" />
      </fileset>
    </delete>

    <antcall target="set-distribution-properties">
      <param name="org.nuxeo.distribution.name" value="coreserver" />
    </antcall>

    <antcall target="reorganize-libs" />
    <antcall target="build-server" />
    <antcall target="build-sdk" />
  </target>

  <target name="copy-packages-xml">
    <!-- Copy default packages.xml file -->
    <copy file="src/main/resources/packages.xml" tofile="${tomcat}/setupWizardDownloads/packages.xml">
    </copy>
  </target>

  <target name="sample-installAfterRestart-files">
    <echo file="${tomcat}/nxserver/data/installAfterRestart-SC.log">init
install nuxeo-sc
    </echo>
    <echo file="${tomcat}/nxserver/data/installAfterRestart-DAM.log">init
install nuxeo-dam</echo>
  </target>

  <target name="build-nuxeo-cap"
          if="build.cap"
          depends="sample-installAfterRestart-files,copy-packages-xml"
          description="Build Tomcat distribution with Nuxeo CAP">
    <echo level="info">Building Nuxeo CAP...</echo>
    <property name="distribution.dir" value="${outdir}/${classifier}-${maven.project.version}-tomcat" />
    <delete failonerror="false" dir="${distribution.dir}" />
    <copy todir="${distribution.dir}">
      <fileset dir="${tomcat}" />
    </copy>
    <antcall target="chmodx" />

    <!-- Nuxeo CAP -->
    <unzip dest="${distribution.dir}/nxserver">
      <artifact:resolveFile key="org.nuxeo.ecm.distribution:nuxeo-distribution-cap::zip" />
    </unzip>

    <antcall target="set-distribution-properties">
      <param name="org.nuxeo.distribution.name" value="cap" />
    </antcall>

    <echo file="${distribution.dir}/setupWizardDownloads/packages-default-selection.properties"
          message="preset=nuxeo-cap-preset" />

    <antcall target="reorganize-libs" />
    <antcall target="build-server" />
    <antcall target="build-sdk" />
  </target>

  <target name="build-server">
    <zip destfile="${outdir}/${maven.project.artifactId}-${maven.project.version}-${classifier}.zip"
         basedir="${outdir}"
         includes="${classifier}-${maven.project.version}-tomcat/**" />
    <artifact:attach file="${outdir}/${maven.project.artifactId}-${maven.project.version}-${classifier}.zip"
                     classifier="${classifier}"
                     type="zip" />
  </target>

  <target name="reorganize-libs">
    <!-- Add Tomcat specific requirements -->
    <copy todir="${distribution.dir}/nxserver/bundles" overwrite="true">
      <artifact:set>
        <includes>
          <artifact groupId="org.nuxeo*" />
        </includes>
        <excludes>
          <artifact groupId="org.nuxeo.lib*" />
        </excludes>
      </artifact:set>
    </copy>
    <copy todir="${distribution.dir}/nxserver/lib" overwrite="true">
      <artifact:set>
        <includes>
          <artifact groupId="!org.nuxeo*" scope="!test" />
          <artifact groupId="org.nuxeo.lib*" scope="!test" />
        </includes>
      </artifact:set>
    </copy>
    <!-- remove libraries already provided by Tomcat or unneeded -->
    <delete>
      <fileset dir="${distribution.dir}/nxserver/lib">
        <!-- jetty is needed by vcs remote -->
        <!-- jetty-util is needed by jsp impl jar - which is referring jetty log classes -->
        <!-- jetty-naming has jndi properties conflicting with Tomcat -->
        <include name="jetty-naming*" />
        <include name="el-api*" />
        <include name="jsp-*" />
        <include name="juel-api-*" />
        <include name="tomcat-dbcp-*" />
      </fileset>
      <!-- replaced by sl4j bridge -->
      <fileset dir="${distribution.dir}/nxserver/lib">
        <include name="commons-logging*" />
      </fileset>
    </delete>
    <!-- Move some libraries from nxserver to Tomcat default lib directory -->
    <move todir="${distribution.dir}/lib">
      <fileset dir="${distribution.dir}/nxserver/lib">
        <include name="nuxeo-*" />
        <include name="lucene-*" />
        <include name="commons-lang-*" />
        <include name="commons-lang3-*" />
        <include name="freemarker-*" />
        <include name="mail-*" />
        <include name="xercesImpl-*" />
        <!-- install sl4j bridge in container classpath -->
        <include name="slf4j*" />
        <include name="jcl-over-slf4j*" />
        <include name="log4j-*" />
        <include name="elasticsearch-*" />
        <include name="lucene-*" />
      </fileset>
    </move>
    <nx:rmdups dir="${distribution.dir}/nxserver/lib" />
    <nx:rmdups dir="${distribution.dir}/lib" />

    <!-- Move JAX libraries more recent than those from JDK into endorsed -->
    <move todir="${distribution.dir}/endorsed">
      <fileset dir="${distribution.dir}/nxserver/lib">
        <include name="jaxb-api-*" />
        <include name="jaxws-api-*" />
      </fileset>
    </move>
  </target>

  <target name="set-distribution-properties">
    <property name="distribution.properties.file"
              value="${distribution.dir}/templates/common/config/distribution.properties" />
    <echo append="false" file="${distribution.properties.file}">## DO NOT MANUALLY EDIT THIS FILE
org.nuxeo.distribution.name=${org.nuxeo.distribution.name}
org.nuxeo.distribution.server=tomcat
org.nuxeo.distribution.version=${maven.project.version}
org.nuxeo.distribution.date=${DSTAMP}${TSTAMP}
org.nuxeo.distribution.package=zip</echo>
  </target>

  <target name="build-sdk" if="build.sdk">
    <copy file="${distribution.dir}/templates/common/config/distribution.properties" todir="${distribution.dir}/sdk" />
    <copy file="${outdir}/artifacts-tomcat.properties" todir="${distribution.dir}/sdk" />
    <move todir="${distribution.dir}/sdk">
      <fileset dir="${distribution.dir}/nxserver/">
        <filename name="*artifacts-*.properties" />
      </fileset>
    </move>
    <artifact:printMgt output="${distribution.dir}/sdk/artifacts-nuxeo.properties"
                       key="org.nuxeo:nuxeo-addons-parent:${nuxeo.addons.version}:pom"
                       scopes="compile,provided,runtime" />
    <artifact:printMgt output="${distribution.dir}/sdk/test-artifacts-nuxeo.properties"
                       key="org.nuxeo:nuxeo-addons-parent:${nuxeo.addons.version}:pom"
                       scopes="test,provided" />

    <copy todir="${distribution.dir}/sdk/sources">
      <artifact:resolveFiles source="${distribution.dir}/sdk/artifacts*.properties" classifier="sources" />
      <artifact:resolveFiles source="${distribution.dir}/sdk/test-artifacts*.properties" classifier="sources" />
    </copy>
    <copy todir="${distribution.dir}/sdk/tests">
      <artifact:resolveFiles source="${distribution.dir}/sdk/test-artifacts*.properties" />
    </copy>

    <unzip dest="${distribution.dir}/sdk/tools">
      <artifact:resolveFile key="org.nuxeo:nuxeo-ecm::zip:tools" />
    </unzip>

    <copy todir="${distribution.dir}/nxserver/bundles">
      <artifact:resolveFile key="org.nuxeo.ecm.platform:nuxeo-platform-seam-debug" />
    </copy>

    <zip destfile="${outdir}/${maven.project.artifactId}-${maven.project.version}-${classifier}-sdk.zip"
         basedir="${outdir}"
         includes="${classifier}-${maven.project.version}-tomcat/**" />
    <artifact:attach file="${outdir}/${maven.project.artifactId}-${maven.project.version}-${classifier}-sdk.zip"
                     classifier="${classifier}-sdk"
                     type="zip" />
  </target>

  <target name="chmodx">
    <chmod dir="${distribution.dir}" perm="ug+x" includes="*.command,bin/*.sh,bin/*ctl,bin/*.command" />
  </target>
</project>
